* Conceitos
** Processo de instalação de um projeto cake 1.3
   1. =git clone https://github.com/cakephp/cakephp; cd cakephp=
   2. =git checkout 1.3.21=
   3. =rm -rf .git=
   4. Criar o Dockerfile e docker-compose igual a:
      [[file:cake-blog/Dockerfile]]
      [[file:cake-blog/docker-compose.yml]]
   5. =docker-compose up -d=
** Configuração do banco
   A configuração do banco é feita no arquivo =/app/config/database.php=
** Convenções
    [[https://book.cakephp.org/1.3/en/The-Manual/Basic-Principles-of-CakePHP/CakePHP-Conventions.html][Fonte]]
*** Nomenclatura
    Legenda: lw = lowercase
    | Arquivos  | Nomes de classe | Modelos   | Nome de tabelas      | Nome de campos |
    | CamelCase | SnakeCase       | CamelCase | Snake, No plural, lw | snakecase, lw  |

   
    - Rotas são "any inflected"(podendo ser any *case), porém convenção é lowercase e snakecased
    - Views estão em uma pasta com o mesmo nome lw que o controller(i.e. PostController = post), recebendo o nome do método a qual correspondem.
   
*** O método de um controller index() é chamado por padrão
** Estrutura básica
   Cada membro da estrutura possui sua respectiva forma de generalizar funcionalidades para ser utilizada por outros membros do mesmo tipo.
*** Request típico
   #+ATTR_ORG: :width 400
   [[file:public/typical-cake-request.png]]
   
   
*** Controller e “Components”
    Logica que interage com a view e Model, acessada logo após a rota

*** View e "Helpers"
    Logica de apresentação
*** Model e "Behaviors"
    Logica de Modelagem
*** Application Extensions
    Conjunto de Controllers, Views e Models que podem ser utilizados em mais de uma aplicação
    
** Chaves primarias
   O cake não suporta chaves compostas, sempre haverá uma chave primária, podendo ser UUID (char(36)), ou int.

** Estrutura de arquivos
    - app
      - *libs*
        Difere da pasta vendor pois acomoda livrarias internas
      - *webroot*
        Arquivos estáticos, sendo também o documento root em produção
    - cake
    - vendors
    - plugins
    - .htaccess
    - index.php
    - README

** DataSources
   Em suma, é absastração entre o modelo e a fonte de dados (geralmente o banco de dados), porém é possivel criar datasources customizaveis para poder configurar uma nova fonte de dados (i.e. uma API externa [[https://book.cakephp.org/1.3/en/The-Manual/Developing-with-CakePHP/DataSources.html][Exemplo/Fonte]]). Plugins podem adicionar Datasources.

** Views
   [[https://book.cakephp.org/1.3/en/The-Manual/Developing-with-CakePHP/Views.html][Fonte]]
*** São implementadas em php, sob a extensão .ctp
*** Camadas da view
**** Layouts
     Codigo apresentacional que embrulha varias funcionalidades do seu código, views são renderizadas dentro de um layout.
     O =flash= é um layout utilizado para mostrar mensagens de controllers.
     - =/app/views/layouts=
**** Elements
     Fragmentos reutilizáveis, utilizados dentro das views. O que no react chama de 'Componentes'.
**** Helpers
     [[https://book.cakephp.org/1.3/en/The-Manual/Developing-with-CakePHP/Helpers.html][Fonte]]
     Encapsulam *lógica* reutilizável, ajundando a fazer formulários, funcionalidades AJAX etc.
     
** Scaffolding
   O scaffold analiza as tabelas de sua base de dados e cria uma listas padronizadas com botões de inserção, edição e exclusão, formulários padronizados para edição e visões padronizadas para visualização de um único registro da base de dados.

   O intuito do scaffold é ser utilizado para acelerar etapas iniciais do projeto, onde há uma modelagem prematura e sujeita a mudança.

   *Para realizar o scaffolding* só é necessário um model e seu controller. Uma vez que você tiver definido a variável $scaffold em seu controller, já estará preparado e funcionando. /Criar métodos em controllers que possuam definições de scaffold pode causar resultados indesejados/.

   O scaffold tem conhecimento sobre as associações de models, se o seu model possuir referências a outros, você vera os IDs relacionads na listagem.

   Em  um scaffolding normal você pode substituir métodos individuais e substituí-los você mesmo. Estilo "overriding".

   [[Referência]]
   
*** Personalizando views do scaffold
A utilização de templates  não é recomendada em produção, sendo colocadas em:

=/app/views/scaffolds/index.ctp=.


** Geração de Codigo
   Aposto que gerou a explicação também.
   [[https://book.cakephp.org/1.3/en/The-Manual/Core-Console-Applications/Code-Generation-with-Bake.html][Referência]]

** Tarefas comuns
    - [[https://book.cakephp.org/1.3/en/The-Manual/Common-Tasks-With-CakePHP/Data-Validation.html][Data-Validation]]
    - [[https://book.cakephp.org/1.3/en/The-Manual/Common-Tasks-With-CakePHP/Data-Sanitization.html][Data-Sanitization]]
    - [[Data-SanitizationCommon-Tasks-With-CakePHP/Error-Handling.html][Error-Handling]]
    - [[Data-SanitizationCommon-Tasks-With-CakePHP/Debugging.html][Debugging]]
    - [[Data-SanitizationCommon-Tasks-With-CakePHP/Caching.html][Caching]]
    - [[Data-SanitizationCommon-Tasks-With-CakePHP/Logging.html][Logging]]
    - [[Data-SanitizationCommon-Tasks-With-CakePHP/Testing.html][Testing]]
    - [[Data-SanitizationCommon-Tasks-With-CakePHP/Internationalization-Localization.html][Internationalization-Localization]]
    - [[Data-SanitizationCommon-Tasks-With-CakePHP/Pagination.html][Pagination]]
    - [[Data-SanitizationCommon-Tasks-With-CakePHP/REST.html][REST]]

   [[https://book.cakephp.org/1.3/en/The-Manual/Common-Tasks-With-CakePHP.html][Fonte]]


* Cake-Blog
  - [[https://book.cakephp.org/1.3/en/The-Manual/Common-Tasks-With-CakePHP.html][Duvida 1]]
  - Duvida 2: Editor para ajudar com o namespacing implícito do Cake e a versão do php, o emacs tem o o cakephp.el que ainda não tentei, mas não li nada sobre o namespacing
  - [[https://book.cakephp.org/1.3/en/The-Manual/Tutorials-Examples/Blog.html#adding-posts][Duvida 3]] : setFlash() ficou confuso
* Cake-Acl
